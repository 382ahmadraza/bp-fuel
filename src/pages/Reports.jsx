import React, { useState, useEffect } from "react";
import { Container } from "../components/shared/layout/Container";
import { Heading } from "../components/shared/common/Heading";
import { Button } from "../components/shared/common/Button";
import { Icon } from "../assets/icons";
import { storage } from "../utils/storage";
import { getBPLevel } from "../utils/health";
import toast from "react-hot-toast";

export const Reports = () => {
  const [bpReadings, setBpReadings] = useState([]);
  const [meals, setMeals] = useState([]);
  const [reportData, setReportData] = useState(null);

  useEffect(() => {
    const bpData = storage.getBPReadings();
    const mealData = storage.getMeals();
    setBpReadings(bpData);
    setMeals(mealData);
    generateReport(bpData, mealData);
  }, []);

  const generateReport = (bpData, mealData) => {
    const last7Days = new Date();
    last7Days.setDate(last7Days.getDate() - 7);

    const recentBP = bpData.filter(
      (reading) => new Date(reading.date) >= last7Days
    );

    const recentMeals = mealData.filter(
      (meal) => new Date(meal.date) >= last7Days
    );

    const avgSystolic =
      recentBP.length > 0
        ? Math.round(
            recentBP.reduce((sum, reading) => sum + reading.systolic, 0) /
              recentBP.length
          )
        : 0;

    const avgDiastolic =
      recentBP.length > 0
        ? Math.round(
            recentBP.reduce((sum, reading) => sum + reading.diastolic, 0) /
              recentBP.length
          )
        : 0;

    const avgCalories =
      recentMeals.length > 0
        ? Math.round(
            recentMeals.reduce((sum, meal) => sum + meal.calories, 0) /
              recentMeals.length
          )
        : 0;

    const healthyMeals = recentMeals.filter((meal) => meal.isHealthy).length;
    const healthyMealPercentage =
      recentMeals.length > 0
        ? Math.round((healthyMeals / recentMeals.length) * 100)
        : 0;

    const bpLevel =
      avgSystolic > 0 && avgDiastolic > 0
        ? getBPLevel(avgSystolic, avgDiastolic)
        : null;

    setReportData({
      period: "7 days",
      bpReadings: recentBP.length,
      mealsLogged: recentMeals.length,
      avgSystolic,
      avgDiastolic,
      avgCalories,
      healthyMealPercentage,
      bpLevel,
    });
  };

  const downloadReport = () => {
    if (!reportData) {
      toast.error("No data available for report");
      return;
    }

    const reportContent = `
BP-FUEL HEALTH REPORT
Generated on: ${new Date().toLocaleDateString()}
Report Period: Last ${reportData.period}

=== BLOOD PRESSURE SUMMARY ===
Total Readings: ${reportData.bpReadings}
Average BP: ${reportData.avgSystolic}/${reportData.avgDiastolic} mmHg
${
  reportData.bpLevel ? `Status: ${reportData.bpLevel.label}` : "Status: No data"
}

=== NUTRITION SUMMARY ===
Meals Logged: ${reportData.mealsLogged}
Average Daily Calories: ${reportData.avgCalories}
Healthy Meals: ${reportData.healthyMealPercentage}%

=== RECOMMENDATIONS ===
${
  reportData.bpLevel?.level === "normal"
    ? "✓ Your blood pressure is in the normal range. Keep up the good work!"
    : ""
}
${
  reportData.bpLevel?.level === "elevated"
    ? "⚠ Your blood pressure is elevated. Consider lifestyle modifications."
    : ""
}
${
  reportData.bpLevel?.level === "high1" || reportData.bpLevel?.level === "high2"
    ? "⚠ Your blood pressure is high. Consult with your healthcare provider."
    : ""
}
${
  reportData.healthyMealPercentage >= 70
    ? "✓ Great job maintaining a healthy diet!"
    : "⚠ Try to include more healthy meals in your diet."
}

=== DETAILED DATA ===
Recent BP Readings:
${bpReadings
  .slice(0, 10)
  .map(
    (reading) =>
      `${reading.date} ${reading.time}: ${reading.systolic}/${reading.diastolic} mmHg`
  )
  .join("\n")}

Recent Meals:
${meals
  .slice(0, 10)
  .map(
    (meal) => `${meal.date} ${meal.time}: ${meal.name} (${meal.calories} cal)`
  )
  .join("\n")}

Generated by BP-Fuel Health Monitoring App
    `;

    const blob = new Blob([reportContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `bp-fuel-report-${new Date().toISOString().split("T")[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast.success("Report downloaded successfully!");
  };

  if (!reportData) {
    return (
      <main className="min-h-screen bg-[#FAFAFA] py-8">
        <Container>
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#4CAF50] mx-auto"></div>
            <p className="mt-4 text-[#424242]">
              Generating your health report...
            </p>
          </div>
        </Container>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-[#FAFAFA] py-8">
      <Container>
        <div className="mb-8">
          <Heading level={1} align="center" className="mb-4">
            Health <span className="text-[#2196F3]">Reports</span>
          </Heading>
          <p className="text-[#424242] text-center">
            Comprehensive analysis of your health data from the last{" "}
            {reportData.period}
          </p>
        </div>

        {/* Report Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-xl shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                <Icon name="heart" className="w-6 h-6 text-[#F44336]" />
              </div>
            </div>
            <h3 className="font-semibold text-[#212121] mb-2">Average BP</h3>
            {reportData.avgSystolic > 0 ? (
              <div>
                <div className="text-2xl font-bold text-[#212121]">
                  {reportData.avgSystolic}/{reportData.avgDiastolic}
                </div>
                {reportData.bpLevel && (
                  <div
                    className="text-sm font-medium mt-1"
                    style={{ color: reportData.bpLevel.color }}
                  >
                    {reportData.bpLevel.label}
                  </div>
                )}
              </div>
            ) : (
              <div className="text-[#9E9E9E]">No data</div>
            )}
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <Icon name="dashboard" className="w-6 h-6 text-[#2196F3]" />
              </div>
            </div>
            <h3 className="font-semibold text-[#212121] mb-2">BP Readings</h3>
            <div className="text-2xl font-bold text-[#212121]">
              {reportData.bpReadings}
            </div>
            <div className="text-sm text-[#9E9E9E]">
              Last {reportData.period}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                <Icon name="utensils" className="w-6 h-6 text-[#FF9800]" />
              </div>
            </div>
            <h3 className="font-semibold text-[#212121] mb-2">Avg Calories</h3>
            <div className="text-2xl font-bold text-[#212121]">
              {reportData.avgCalories}
            </div>
            <div className="text-sm text-[#9E9E9E]">Per day</div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <Icon name="fileText" className="w-6 h-6 text-[#4CAF50]" />
              </div>
            </div>
            <h3 className="font-semibold text-[#212121] mb-2">Healthy Meals</h3>
            <div className="text-2xl font-bold text-[#212121]">
              {reportData.healthyMealPercentage}%
            </div>
            <div className="text-sm text-[#9E9E9E]">Of total meals</div>
          </div>
        </div>

        {/* Detailed Report */}
        <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
            <h3 className="text-2xl font-semibold text-[#212121] mb-4 sm:mb-0">
              Detailed Health Analysis
            </h3>
            <Button variant="primary" onClick={downloadReport}>
              <Icon name="download" className="w-4 h-4 mr-2" />
              Download Report
            </Button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* BP Analysis */}
            <div>
              <h4 className="text-lg font-semibold text-[#212121] mb-4">
                Blood Pressure Analysis
              </h4>
              {reportData.bpReadings > 0 ? (
                <div className="space-y-4">
                  <div className="p-4 bg-[#FAFAFA] rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-[#424242]">Average Reading:</span>
                      <span className="font-semibold">
                        {reportData.avgSystolic}/{reportData.avgDiastolic} mmHg
                      </span>
                    </div>
                    {reportData.bpLevel && (
                      <div className="flex justify-between items-center">
                        <span className="text-[#424242]">Status:</span>
                        <span
                          className="font-semibold"
                          style={{ color: reportData.bpLevel.color }}
                        >
                          {reportData.bpLevel.label}
                        </span>
                      </div>
                    )}
                  </div>

                  <div className="p-4 bg-blue-50 rounded-lg">
                    <h5 className="font-semibold text-[#2196F3] mb-2">
                      Recommendations:
                    </h5>
                    <ul className="text-sm text-[#424242] space-y-1">
                      {reportData.bpLevel?.level === "normal" && (
                        <>
                          <li>• Continue your healthy lifestyle</li>
                          <li>• Maintain regular exercise routine</li>
                          <li>• Keep monitoring regularly</li>
                        </>
                      )}
                      {reportData.bpLevel?.level === "elevated" && (
                        <>
                          <li>• Consider lifestyle modifications</li>
                          <li>• Reduce sodium intake</li>
                          <li>• Increase physical activity</li>
                        </>
                      )}
                      {(reportData.bpLevel?.level === "high1" ||
                        reportData.bpLevel?.level === "high2") && (
                        <>
                          <li>• Consult with healthcare provider</li>
                          <li>• Monitor daily and keep records</li>
                          <li>• Follow prescribed medications</li>
                        </>
                      )}
                    </ul>
                  </div>
                </div>
              ) : (
                <p className="text-[#9E9E9E]">
                  No BP readings available for analysis
                </p>
              )}
            </div>

            {/* Nutrition Analysis */}
            <div>
              <h4 className="text-lg font-semibold text-[#212121] mb-4">
                Nutrition Analysis
              </h4>
              {reportData.mealsLogged > 0 ? (
                <div className="space-y-4">
                  <div className="p-4 bg-[#FAFAFA] rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-[#424242]">Meals Logged:</span>
                      <span className="font-semibold">
                        {reportData.mealsLogged}
                      </span>
                    </div>
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-[#424242]">
                        Avg Daily Calories:
                      </span>
                      <span className="font-semibold">
                        {reportData.avgCalories}
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-[#424242]">Healthy Meals:</span>
                      <span className="font-semibold text-[#4CAF50]">
                        {reportData.healthyMealPercentage}%
                      </span>
                    </div>
                  </div>

                  <div className="p-4 bg-orange-50 rounded-lg">
                    <h5 className="font-semibold text-[#FF9800] mb-2">
                      Nutrition Tips:
                    </h5>
                    <ul className="text-sm text-[#424242] space-y-1">
                      {reportData.healthyMealPercentage >= 70 ? (
                        <>
                          <li>• Excellent job maintaining healthy eating!</li>
                          <li>• Continue focusing on balanced nutrition</li>
                          <li>• Stay hydrated throughout the day</li>
                        </>
                      ) : (
                        <>
                          <li>• Try to include more vegetables and fruits</li>
                          <li>• Reduce processed and high-sodium foods</li>
                          <li>• Focus on lean proteins and whole grains</li>
                        </>
                      )}
                    </ul>
                  </div>
                </div>
              ) : (
                <p className="text-[#9E9E9E]">
                  No meal data available for analysis
                </p>
              )}
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Button
            variant="primary"
            className="h-16"
            onClick={() => (window.location.href = "/bp-check")}
          >
            <Icon name="heart" className="w-5 h-5 mr-2" />
            Check BP Now
          </Button>
          <Button
            variant="secondary"
            className="h-16"
            onClick={() => (window.location.href = "/meal-check")}
          >
            <Icon name="camera" className="w-5 h-5 mr-2" />
            Log Meal
          </Button>
          <Button
            variant="accent"
            className="h-16"
            onClick={() => (window.location.href = "/dashboard")}
          >
            <Icon name="dashboard" className="w-5 h-5 mr-2" />
            View Dashboard
          </Button>
        </div>
      </Container>
    </main>
  );
};
